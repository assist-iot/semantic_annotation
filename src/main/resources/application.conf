include "akka-http-version"

seaman {
    http {
      port = 8080
      port = ${?SEAMAN_REST_PORT}
      host = "0.0.0.0"
      host = ${?SEAMAN_REST_HOST}
    }
    max-shutdown-duration = "20 seconds"
    parallelism = 2
    buffer-size = 10
    standalone-mode = false
    standalone-mode = ${?SEAMAN_STANDALONE_MODE}
    restore-channels-stopped = false
    restore-channels-stopped = ${?SEAMAN_RESTORE_STOPPED}
    log-to-file = false
    log-to-file = ${?SEAMAN_LOG_TO_FILE}

    encryption {
        auth_secret = "6#n&kzEg5v432_ojMf%%4bU1758ioIlU"
        auth_secret = ${?SEAMAN_ENCRYPTION_AUTH_SECRET}
    }
}

mongodb-client {
    host = "127.0.0.1"
    host = ${?MONGO_HOST}
    port = 27017
    port = ${?MONGO_PORT}
    database = "seaman"
    database = ${?MONGO_DATABASE}
    user = "seaman"
    user = ${?MONGO_USER}
#     TODO: Prepare better authentication, at least a strong password
    password = "aD9vJjacKa&zP3qjG_Gqi4B"
    password = ${?MONGO_PASSWORD}
}

kafka-broker = {
  host = "127.0.0.1"
  host = ${?SEAMAN_KAFKA_HOST}
  port = 9093
  port = ${?SEAMAN_KAFKA_PORT}
}

mqtt-broker = {
  protocol = "tcp"
  protocol = ${?SEAMAN_MQTT_PROTOCOL}
  host = "127.0.0.1"
  host = ${?SEAMAN_MQTT_HOST}
  port = 1883
  port = ${?SEAMAN_MQTT_PORT}
  inputClientId = "semann/source",
  inputClientId = ${?SEAMAN_MQTT_INPUT_CLIENT_ID}
  outputClientId = "semann/sink"
  outputClientId = ${?SEAMAN_MQTT_OUTPUT_CLIENT_ID}
  errorClientId = "semann/error"
  errorClientId = ${?SEAMAN_MQTT_ERROR_CLIENT_ID}
  monitorInputClientId = "semann/monitor/input"
  monitorInputClientId = ${?SEAMAN_MQTT_MONITOR_INPUT_CLIENT_ID}
  monitorOutputClientId = "semann/monitor/output"
  monitorOutputClientId = ${?SEAMAN_MQTT_MONITOR_OUTPUT_CLIENT_ID}
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  loglevel = ${?SEAMAN_LOG_LEVEL}
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  http {
    server-header = akka-http/${akka.http.version}

    parsing {
        max-content-length = 17m
    }
  }

  kafka {
    delete.topic.enable = true
    auto.create.topics.enable = true

    consumer {
      poll-interval = 50ms
      poll-timeout = 50ms

      stop-timeout = 30s
      close-timeout = 20s
      commit-timeout = 15s
      wakeup-timeout = 10s

      use-dispatcher = "akka.kafka.default-dispatcher"

      kafka-clients {
        # Disable auto-commit by default
        enable.auto.commit = false
      }
    }
    producer {
      parallelism = 100

      close-timeout = 60s

      use-dispatcher = "akka.kafka.default-dispatcher"

      kafka-clients {
      }
      offset.storage = "kafka"
      dual.commit.enabled = false
      auto.commit.enable = true
    }
  }
}
